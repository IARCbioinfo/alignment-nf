manifest {
    homePage = 'https://github.com/iarcbioinfo/alignment-nf'
    description = 'Align fastq or realign BAM files from Whole Exome/Whole Genome sequencing data'
    mainScript = 'alignment.nf'
    version = 1.3
}

profiles {
  conda {
	process.conda = "$baseDir/environment.yml"
	conda.createTimeout = "200 min"
  }
  docker {
    docker.enabled = true
    process.container = 'iarcbioinfo/alignment-nf:v1.3'
  }
  singularity {
    singularity.enabled = true
    singularity.autoMonts = true
    process.container = 'iarcbioinfo/alignment-nf:v1.3'
    pullTimeout = "200 min"
  }
}

process {
    shell =  ['/bin/bash','-o','pipefail']
}

params.output_folder = "./results"

timeline {
  enabled = true
  file = "${params.output_folder}/nf-pipeline_info/alignment-nf_timeline.html"
}

report {
  enabled = true
  file = "${params.output_folder}/nf-pipeline_info/alignment-nf_report.html"
}

trace {
  enabled = true
  file = "${params.output_folder}/nf-pipeline_info/alignment-nf_trace.txt"
}

dag {
  enabled = true
  file = "${params.output_folder}/nf-pipeline_info/alignment-nf_dag.html"
}

params {

// resource defaults
max_memory = 128.GB
max_cpus = 8
max_time = 240.h
}

// to control some job configuration
process {

  shell =  ['/bin/bash','-o','pipefail']

  cpus = { check_max( 1 * task.attempt, 'cpus' ) }
  memory = { check_max( 7.GB * task.attempt, 'memory' ) }
  time = { check_max( 6.h * task.attempt, 'time' ) }

  errorStrategy = { task.exitStatus in [143,137,104,134,139] ? 'retry' : 'finish' }
  maxRetries = 1
  maxErrors = '-1'
  // realingment from CRAM/BAM
  withLabel:realn_cram_bam {
    cpus = { check_max( 8 * task.attempt, 'cpus' ) }
    memory = { check_max( 50.GB * task.attempt, 'memory' ) }
    time = { check_max( 48.h * task.attempt, 'time' ) }
  }
  //1 cpu 25Gb facets
  withLabel:load_facets {
    cpus = { check_max( 1 * task.attempt, 'cpus' ) }
    memory = { check_max( 25.GB * task.attempt, 'memory' ) }
    time = { check_max( 6.h * task.attempt, 'time' ) }
  }

}


// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'time') {
    try {
      if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus') {
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
